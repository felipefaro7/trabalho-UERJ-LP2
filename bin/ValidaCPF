

public class ValidaCpf {

    public static boolean isCPF(String CPF) {
        String CPFConvertido = CPF.replaceAll("[^0-9]", ""); // Remove todos os caracteres que não são dígitos

        if (CPFConvertido.length() != 11) { // Verifica se o CPF convertido tem 11 dígitos
            return false;
        }

        // considera-se erro CPF's formados por uma sequencia de numeros iguais
        if (CPFConvertido.matches("(\\d)\\1{10}")) { // Verifica se todos os dígitos são iguais
            return false;
        }

        char dig10, dig11;
        int sm, i, r, num, peso;

        // "try" - protege o código para eventuais erros de conversão de tipo (int)
        try {
            // Calculo do 1o. Digito Verificador
            sm = 0;
            peso = 10;
            for (i = 0; i < 9; i++) {
                num = CPFConvertido.charAt(i) - '0'; // Substituído o cast por uma subtração
                sm += num * peso;
                peso--;
            }

            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                dig10 = '0';
            else dig10 = (char) (r + '0'); // converte no respectivo caractere numérico

            // Calculo do 2o. Digito Verificador
            sm = 0;
            peso = 11;
            for(i = 0; i < 10; i++) {
                num = CPFConvertido.charAt(i) - '0';
                sm += num * peso;
                peso--;
            }

            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                dig11 = '0';
            else dig11 = (char) (r + '0');

            // Verifica se os dígitos calculados conferem com os dígitos informados.
            if ((dig10 == CPFConvertido.charAt(9)) && (dig11 == CPFConvertido.charAt(10)))
                return true;
            else return false;
        } catch (InputMismatchException erro) {
            return false;
        }
    }

    public static String imprimeCPF(String CPF) {
        String CPFConvertido = CPF.replaceAll("[^0-9]", ""); // Remove todos os caracteres que não são dígitos
        return (CPFConvertido.substring(0, 3) + "." + CPFConvertido.substring(3, 6) + "." +
                CPFConvertido.substring(6, 9) + "-" + CPFConvertido.substring(9, 11));
    }

    public static long toLong(String CPF) {
        String CPFConvertido = CPF.replaceAll("[^0-9]", ""); // Remove todos os caracteres que não são dígitos
        return Long.parseLong(CPFConvertido); // Converte a string do CPF para um número long
    }

    
}